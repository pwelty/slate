name: Slate Dashboard CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint || echo "No linter configured yet"
      
    - name: Run tests
      run: npm test || echo "No tests configured yet - Issue #6"
      
    - name: Build project
      run: npm run build
      
    - name: Check for console.log statements
      run: |
        echo "Checking for console.log statements (Issue #7)..."
        if grep -r "console\.log" src/; then
          echo "‚ö†Ô∏è  Found console.log statements that need to be removed for production"
          echo "See Issue #7: Remove/replace console.log statements"
          exit 1
        else
          echo "‚úÖ No console.log statements found"
        fi

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential hardcoded secrets..."
        if grep -r -i "api[_-]key\|secret\|token\|password" src/ --include="*.js" --include="*.yaml" --include="*.yml" | grep -v "placeholder\|example\|config"; then
          echo "‚ö†Ô∏è  Found potential hardcoded secrets"
          echo "See Issue #10: Implement secure API key handling"
          exit 1
        else
          echo "‚úÖ No obvious hardcoded secrets found"
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t slate-dashboard:${{ github.sha }} .
        docker build -t slate-dashboard:latest .
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name slate-test -p 8080:80 slate-dashboard:latest
        sleep 5
        curl -f http://localhost:8080 || exit 1
        docker stop slate-test

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "This is where you'd deploy to your staging server"
        echo "For Tailscale setup, this might copy files to your staging directory"
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    # Only deploy to production on manual approval or when ready
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "For your Tailscale setup:"
        echo "1. Copy built files to production directory"
        echo "2. Restart Tailscale service"
        echo "3. Verify deployment at https://slate.squirrel-corn.ts.net" 