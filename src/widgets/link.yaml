# Link Widget Definition
# ======================

extends: "widget"

metadata:
  type: "link"
  description: "Clickable link with icon and description"
  version: "1.0.0"
  author: "Slate Dashboard"

# Configuration schema
schema:
  name:
    type: "string"
    required: true
    description: "Display name for the link"
  
  url:
    type: "string"
    required: true
    description: "URL to navigate to"
  
  icon:
    type: "string"
    required: false
    description: "Icon name or emoji"
    default: "ðŸ”—"
  
  description:
    type: "string"
    required: false
    description: "Optional description text"
    default: ""
  
  statusCheck:
    type: "boolean"
    required: false
    description: "Whether to check if the service is online"
    default: false
  
  target:
    type: "string"
    required: false
    description: "Link target (_blank, _self, etc.)"
    default: "_blank"
  
  rel:
    type: "string"
    required: false
    description: "Link relationship (noopener, noreferrer, etc.)"
    default: "noopener"

# Widget capabilities
capabilities:
  realTimeUpdates: false
  userInteraction: true
  apiIntegration: false
  caching: false
  responsive: true

# Widget body content (will be inserted into base template)
widget-body: |
  <a href="{{url}}" class="link-item" target="{{target}}" rel="{{rel}}">
    <div class="link-icon">{{icon}}</div>
    <div class="link-content">
      <div class="link-name">{{name}}</div>
      {% if description %}
        <div class="link-description">{{description}}</div>
      {% endif %}
    </div>
    {% if statusCheck %}
      <div class="link-status">
        <div class="status-indicator" id="status-{{name|lower|replace(' ', '-')}}"></div>
      </div>
    {% endif %}
  </a>

# Widget-specific CSS (base styles are in widget.css)
css: |
  .link-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    text-decoration: none;
    color: inherit;
    background: var(--bg-secondary, #1e293b);
    border: 1px solid var(--border, rgba(255, 255, 255, 0.1));
    border-radius: var(--radius, 0.5rem);
    transition: all 0.3s ease;
    min-height: 60px;
  }
  
  .link-item:hover {
    background: var(--bg-tertiary, #334155);
    border-color: var(--accent, #3b82f6);
    transform: translateY(-2px);
    box-shadow: var(--shadow, 0 4px 6px -1px rgba(0, 0, 0, 0.3));
  }
  
  .link-icon {
    font-size: 1.5rem;
    line-height: 1;
    flex-shrink: 0;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .link-content {
    flex: 1;
    min-width: 0;
  }
  
  .link-name {
    font-size: var(--font-size-base, 1rem);
    font-weight: var(--font-weight-medium, 500);
    color: var(--text-primary, #f1f5f9);
    margin-bottom: 0.25rem;
    line-height: 1.2;
  }
  
  .link-description {
    font-size: calc(var(--font-size-base, 1rem) * 0.875);
    color: var(--text-secondary, #cbd5e1);
    line-height: 1.3;
    opacity: 0.8;
  }
  
  .link-status {
    flex-shrink: 0;
    padding-left: 0.5rem;
  }
  
  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--status-offline, #ef4444);
    transition: all 0.3s ease;
  }
  
  .status-indicator.online {
    background: var(--status-online, #22c55e);
    box-shadow: 0 0 8px var(--status-online-glow, rgba(34, 197, 94, 0.4));
  }
  
  .status-indicator.offline {
    background: var(--status-offline, #ef4444);
    box-shadow: 0 0 8px var(--status-offline-glow, rgba(239, 68, 68, 0.4));
  }
  
  .status-indicator.checking {
    background: var(--status-warning, #f59e0b);
    box-shadow: 0 0 8px var(--status-warning-glow, rgba(245, 158, 11, 0.4));
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

# Widget-specific JavaScript
js: |
  // Link widget - handles status checking
  function initLinkWidget(element, config) {
    if (config.statusCheck) {
      checkLinkStatus(element, config);
      
      // Check status periodically
      setInterval(() => {
        checkLinkStatus(element, config);
      }, 300000); // Check every 5 minutes
    }
    
    console.log('Link widget initialized:', config.name);
  }
  
  async function checkLinkStatus(element, config) {
    const statusElement = element.querySelector('.status-indicator');
    if (!statusElement) return;
    
    statusElement.className = 'status-indicator checking';
    
    try {
      // Use a simple fetch with timeout for status check
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch(config.url, {
        method: 'HEAD',
        mode: 'no-cors',
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      // For no-cors requests, we can't check status, so assume online if no error
      statusElement.className = 'status-indicator online';
      
    } catch (error) {
      statusElement.className = 'status-indicator offline';
    }
  }