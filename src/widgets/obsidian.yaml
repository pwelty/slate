# Obsidian Widget Definition
# =========================

extends: "widget"  # Inherit from base widget template

metadata:
  type: "api"
  description: "Display recent notes from Obsidian Local REST API"
  version: "1.0.0"
  author: "Slate Dashboard"

# Widget-specific schema (will be merged with base schema)
schema:
  baseUrl:
    type: "string"
    required: true
    description: "Base URL for your Obsidian Local REST API (e.g., http://127.0.0.1:27123)"
  
  apiKey:
    type: "string"
    required: true
    description: "Obsidian Local REST API key"
  
  limit:
    type: "integer"
    required: false
    default: 5
    min: 1
    max: 20
    description: "Number of recent notes to display"

# Widget capabilities (will be merged with base capabilities)
capabilities:
  realTimeUpdates: true
  userInteraction: true
  apiIntegration: true
  caching: true

# Data processing to get recent notes from Obsidian  
dataProcessing:
  generateData: |
    import requests
    
    try:
        base_url = config.get('baseUrl', '')
        api_key = config.get('apiKey', '')
        limit = config.get('limit', 3)
        
        if not api_key:
            result = {"items": []}
        else:
            response = requests.get(
                f"{base_url}/vault/",
                headers={"Authorization": f"Bearer {api_key}"}
            )
            
            if response.status_code != 200:
                result = {"items": []}
            else:
                data = response.json()
                files = data.get('files', [])
                
                items = []
                for file_path in files:
                    if file_path.endswith('.md') and len(items) < limit:
                        title = file_path.replace('.md', '').replace('/', ' ‚Üí ')
                        items.append({
                            'title': title,
                            'url': f"obsidian://open?file={file_path.replace('.md', '')}",
                            'dateModified': '',
                            'type': 'note'
                        })
                
                result = {"items": items}
                
    except Exception as e:
        result = {"items": []}

# Widget body content (will be inserted into base template)
widget-body: |
  {% if items %}
    <div class="obsidian-notes">
      {% for item in items %}
        <div class="note-item" onclick="window.open('{{item.url}}', '_blank', 'noopener,noreferrer')" title="Open: {{item.title}}">
          <div class="note-title">{{item.title or 'Untitled Note'}}</div>
          {% if item.preview %}
            <div class="note-preview">{{item.preview}}</div>
          {% endif %}
          <div class="note-meta">
            {% if item.tags %}
              <div class="note-tags">
                {% for tag in item.tags[:3] %}
                  <span class="note-tag">{{tag}}</span>
                {% endfor %}
                {% if item.tags|length > 3 %}
                  <span class="note-tag-more">+{{item.tags|length - 3}}</span>
                {% endif %}
              </div>
            {% endif %}
            {% if item.modified %}
              <span class="note-date">{{item.modified[:10]}}</span>
            {% endif %}
          </div>
        </div>
      {% endfor %}
    </div>
  {% else %}
    <div class="widget-error">
      <div class="error-icon">üìù</div>
      <span class="error-message">No notes found</span>
    </div>
  {% endif %}

# Widget-specific CSS (base styles are in widget.css)
css: |
  .obsidian-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 2rem;
    color: var(--text-secondary, #cccccc);
    font-size: 0.9rem;
  }
  
  .loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid var(--bg-tertiary, rgba(255, 255, 255, 0.1));
    border-top: 2px solid var(--accent, #3b82f6);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .obsidian-notes {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    max-height: 300px;
    overflow-y: auto;
  }
  
  .note-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    padding: 0.75rem;
    background: var(--bg-tertiary, rgba(255, 255, 255, 0.05));
    border-radius: var(--radius, 6px);
    border: 1px solid transparent;
    transition: all 0.2s ease;
    cursor: pointer;
  }
  
  .note-item:hover {
    background: var(--bg-secondary, rgba(255, 255, 255, 0.1));
    border-color: var(--accent, #3b82f6);
    transform: translateY(-1px);
  }
  
  .note-title {
    font-weight: var(--font-weight-medium, 500);
    color: var(--text-primary, #ffffff);
    font-size: 0.9rem;
    line-height: 1.3;
    margin-bottom: 0.25rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .note-preview {
    font-size: 0.8rem;
    color: var(--text-secondary, #cccccc);
    line-height: 1.4;
    opacity: 0.8;
    margin-bottom: 0.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .note-meta {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    font-size: 0.7rem;
    color: var(--text-secondary, #cccccc);
    opacity: 0.6;
  }
  
  .note-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
    align-items: center;
  }
  
  .note-tag {
    background: var(--accent, #3b82f6);
    color: white;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.6rem;
    font-weight: var(--font-weight-medium, 500);
  }
  
  .note-tag-more {
    background: var(--bg-secondary, rgba(255, 255, 255, 0.1));
    color: var(--text-secondary, #cccccc);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.6rem;
    font-weight: var(--font-weight-medium, 500);
  }
  
  .note-date {
    flex-shrink: 0;
    margin-left: 0.5rem;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

# Widget-specific JavaScript  
js: |
  // Obsidian widget - for client-side functionality if needed
  function initObsidianWidget(element, config) {
    console.log('Obsidian widget initialized with server-side data');
  }