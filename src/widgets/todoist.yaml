# Todoist Widget Definition
# ========================

extends: "widget"  # Inherit from base widget template

metadata:
  type: "api"
  description: "Display recent tasks from Todoist"
  version: "1.0.0"
  author: "Slate Dashboard"

# Widget-specific schema (will be merged with base schema)
schema:
  apiToken:
    type: "string"
    required: true
    description: "Todoist API token for authentication"
  
  projectName:
    type: "string"
    required: false
    description: "Filter tasks by project name (optional)"
  
  limit:
    type: "integer"
    required: false
    default: 5
    min: 1
    max: 20
    description: "Number of recent tasks to display"

# Widget capabilities (will be merged with base capabilities)
capabilities:
  realTimeUpdates: true
  userInteraction: true
  apiIntegration: true
  caching: true

# Server-side data fetcher configuration
dataFetcher:
  type: "api"
  method: "GET"
  urlTemplate: "https://api.todoist.com/rest/v2/tasks"
  headers:
    Authorization: "Bearer {apiToken}"
    Content-Type: "application/json"
  responseMapping:
    items: "response"
    fields:
      id: "id"
      content: "content"
      description: "description"
      isCompleted: "is_completed"
      priority: "priority"
      due: "due"
      createdAt: "created_at"
      projectId: "project_id"

# Widget body content (will be inserted into base template)
widget-body: |
  {% if items %}
    <div class="todoist-tasks">
      {% for item in items %}
        {% if not item.isCompleted %}
          <div class="task-item" onclick="window.open('https://todoist.com/app/task/{{item.id}}', '_blank', 'noopener,noreferrer')">
            <div class="task-content">{{item.content or 'Untitled Task'}}</div>
            <div class="task-meta">
              <span class="task-priority priority-{{item.priority or 1}}">P{{item.priority or 1}}</span>
              {% if item.due and item.due.date %}
                <span class="task-due">{{item.due.date}}</span>
              {% endif %}
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  {% else %}
    <div class="widget-error">
      <div class="error-icon">âœ…</div>
      <span class="error-message">No tasks found</span>
    </div>
  {% endif %}

# Widget-specific CSS (base styles are in widget.css)
css: |
  .todoist-tasks {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    max-height: 300px;
    overflow-y: auto;
  }
  
  .task-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    padding: 0.75rem;
    background: var(--bg-tertiary, rgba(255, 255, 255, 0.05));
    border-radius: var(--radius, 6px);
    border: 1px solid transparent;
    transition: all 0.2s ease;
    cursor: pointer;
  }
  
  .task-item:hover {
    background: var(--bg-secondary, rgba(255, 255, 255, 0.1));
    border-color: var(--accent, #3b82f6);
    transform: translateY(-1px);
  }
  
  .task-content {
    font-weight: var(--font-weight-medium, 500);
    color: var(--text-primary, #ffffff);
    font-size: 0.9rem;
    line-height: 1.3;
    margin-bottom: 0.25rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .task-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.7rem;
    color: var(--text-secondary, #cccccc);
    opacity: 0.6;
    margin-top: 0.25rem;
  }
  
  .task-priority {
    color: white;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.6rem;
    font-weight: var(--font-weight-medium, 500);
    text-transform: uppercase;
  }
  
  .priority-1 {
    background: #808080; /* Gray for P1 (normal) */
  }
  
  .priority-2 {
    background: #3b82f6; /* Blue for P2 (high) */
  }
  
  .priority-3 {
    background: #f59e0b; /* Orange for P3 (higher) */
  }
  
  .priority-4 {
    background: #ef4444; /* Red for P4 (urgent) */
  }
  
  .task-due {
    background: var(--bg-secondary, rgba(255, 255, 255, 0.1));
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.6rem;
  }

# Widget-specific JavaScript  
js: |
  // Todoist widget - for client-side functionality if needed
  function initTodoistWidget(element, config) {
    console.log('Todoist widget initialized with server-side data');
  }