# Radar Widget Definition
# ========================

metadata:
  type: "api"
  description: "Live weather radar visualization"
  version: "2.0.0"
  author: "Slate Dashboard"

# Configuration schema
schema:
  title:
    type: "string"
    required: false
    default: ""
    description: "Optional title for the radar widget"
  
  location:
    type: "string"
    required: true
    description: "ZIP code or city name for radar center"
  
  displayName:
    type: "string"
    required: false
    description: "Custom location display name"
    default: ""
  
  apiKey:
    type: "string"
    required: true
    description: "OpenWeatherMap API key for radar tiles"
  
  updateInterval:
    type: "integer"
    required: false
    default: 600000
    description: "Update interval in milliseconds (default: 10 minutes)"

# Widget capabilities
capabilities:
  realTimeUpdates: true
  userInteraction: true
  apiIntegration: true
  caching: false
  responsive: true

# Extend the base widget template
extends: "widget"

# Widget body content
widget-body: |
  <div class="radar-widget">
    <div class="radar-header">
      <div class="radar-location">{{displayName or location}}</div>
      <div class="radar-legend">
        <span class="legend-item light">üü¶ Light</span>
        <span class="legend-item moderate">üü® Moderate</span>
        <span class="legend-item heavy">üüß Heavy</span>
        <span class="legend-item intense">üü• Intense</span>
      </div>
    </div>
    
    {% if radar.error %}
      <div class="radar-error">
        <div class="error-icon">‚ö†Ô∏è</div>
        <div class="error-title">Radar Error</div>
        <div class="error-message">{{radar.error}}</div>
      </div>
    {% else %}
      <div class="radar-map">
        <div class="simple-radar">
          <div class="radar-tiles">
            <div class="radar-base-layer">
              <img src="{{radar.clouds_url}}" 
                   alt="Cloud Coverage" 
                   class="radar-clouds" />
            </div>
            <div class="radar-precipitation-layer">
              <img src="{{radar.precipitation_url}}" 
                   alt="Precipitation Radar" 
                   class="radar-precipitation" />
            </div>
          </div>
          <div class="radar-info">
            <div class="location-marker">üìç {{radar.location_name}}</div>
            <div class="radar-timestamp">Updated: {{radar.timestamp}}</div>
          </div>
        </div>
      </div>
    {% endif %}
    
    <div class="radar-footer">
      <small>Live precipitation radar ‚Ä¢ Server-side rendered</small>
    </div>
  </div>

# Widget-specific CSS
widget-css: |
  <style>
  .radar-widget {
    height: auto;
  }
  
  .radar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .radar-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    width: 100%;
    justify-content: space-between;
  }

  .radar-refresh {
    background: var(--bg-tertiary, rgba(255, 255, 255, 0.1));
    border: 1px solid var(--border, rgba(255, 255, 255, 0.2));
    border-radius: var(--radius, 4px);
    padding: 0.5rem;
    color: var(--text-primary, #ffffff);
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .radar-refresh:hover {
    background: var(--accent, #3b82f6);
    transform: rotate(180deg);
  }

  .radar-legend {
    display: flex;
    gap: 0.5rem;
    font-size: 0.75rem;
    color: var(--text-secondary, #cccccc);
  }

  .legend-item {
    white-space: nowrap;
  }

  .radar-map {
    position: relative;
    height: 200px;
    border-radius: var(--radius, 6px);
    overflow: hidden;
    background: var(--bg-tertiary, #2a2a2a);
    border: 1px solid var(--border, rgba(255, 255, 255, 0.1));
  }

  .simple-radar {
    width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
  }

  .radar-tiles {
    flex: 1;
    position: relative;
    overflow: hidden;
  }

  .radar-base-layer,
  .radar-precipitation-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .radar-clouds,
  .radar-precipitation {
    width: 100%;
    height: 100%;
    object-fit: cover;
    cursor: pointer;
    transition: opacity 0.3s ease;
  }

  .radar-clouds {
    opacity: 0.6;
  }

  .radar-precipitation {
    opacity: 0.8;
  }

  .radar-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .no-precipitation {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
  }

  .precipitation-status {
    text-align: center;
    color: var(--text-primary, #ffffff);
  }

  .status-icon {
    font-size: 2rem;
    display: block;
    margin-bottom: 0.5rem;
  }

  .status-text {
    font-size: 0.9rem;
    font-weight: var(--font-weight-medium, 500);
  }

  .radar-info {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    padding: 1rem 0.75rem 0.5rem;
    color: white;
    font-size: 0.75rem;
  }

  .location-marker {
    font-weight: var(--font-weight-bold, 600);
    margin-bottom: 0.25rem;
  }

  .radar-timestamp {
    opacity: 0.8;
    font-family: var(--font-family-mono, monospace);
  }

  .radar-footer {
    margin-top: 1rem;
    text-align: center;
    color: var(--text-secondary, #cccccc);
    font-size: 0.75rem;
    opacity: 0.8;
  }

  .radar-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 200px;
    text-align: center;
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--border, rgba(255, 255, 255, 0.3));
    border-top: 3px solid var(--accent, #3b82f6);
    border-radius: 50%;
    animation: radar-spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes radar-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .radar-error {
    text-align: center;
    padding: 2rem;
  }

  .error-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .error-title {
    font-size: 1.1rem;
    font-weight: var(--font-weight-bold, 600);
    color: var(--text-primary, #ffffff);
    margin-bottom: 0.5rem;
  }

  .error-message {
    font-size: 0.9rem;
    color: var(--text-secondary, #cccccc);
    margin-bottom: 1.5rem;
  }

  @media (max-width: 768px) {
    .radar-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .radar-legend {
      flex-wrap: wrap;
    }
    
    .radar-map {
      height: 150px;
    }
  }
  </style>

# Data processing function to generate radar data
dataProcessing:
  generateData: |
    import requests
    import json
    import math
    
    try:
        # Extract configuration
        location = config.get('location', '30033')
        api_key = config.get('apiKey', '')
        display_name = config.get('displayName', '')
        
        if not api_key:
            result = {
                'radar': {
                    'error': 'API key required',
                    'location_name': display_name or location,
                    'clouds_url': '',
                    'precipitation_url': '',
                    'timestamp': ''
                }
            }
        else:
            # Get location coordinates
            try:
                geo_url = f"https://api.openweathermap.org/geo/1.0/zip?zip={location},US&appid={api_key}"
                geo_response = requests.get(geo_url, timeout=10)
                geo_response.raise_for_status()
                geo_data = geo_response.json()
                
                lat = geo_data['lat']
                lon = geo_data['lon']
                location_name = display_name or geo_data.get('name', location)
                
            except Exception as e:
                # Fallback to default coordinates (Decatur, GA)
                lat = 33.7748
                lon = -84.2963
                location_name = display_name or 'Decatur'
            
            # Convert lat/lon to tile coordinates (zoom level 6)
            zoom = 6
            lat_rad = lat * math.pi / 180
            n = 2 ** zoom
            x = int((lon + 180) / 360 * n)
            y = int((1 - math.asinh(math.tan(lat_rad)) / math.pi) / 2 * n)
            
            # Generate radar tile URLs
            clouds_url = f"https://tile.openweathermap.org/map/clouds_new/{zoom}/{x}/{y}.png?appid={api_key}"
            precipitation_url = f"https://tile.openweathermap.org/map/precipitation_new/{zoom}/{x}/{y}.png?appid={api_key}"
            
            # Get current timestamp
            from datetime import datetime
            timestamp = datetime.now().strftime("%I:%M %p")
            
            result = {
                'radar': {
                    'error': None,
                    'location_name': location_name,
                    'clouds_url': clouds_url,
                    'precipitation_url': precipitation_url,
                    'timestamp': timestamp
                }
            }
            
    except Exception as e:
        result = {
            'radar': {
                'error': f'Error: {str(e)}',
                'location_name': display_name or location,
                'clouds_url': '',
                'precipitation_url': '',
                'timestamp': ''
            }
        }