# Weather Forecast Widget Definition
# =================================

metadata:
  type: "api"
  description: "5-day weather forecast"
  version: "1.0.0"
  author: "Slate Dashboard"

# Configuration schema
schema:
  title:
    type: "string"
    required: false
    default: ""
    description: "Optional title for the forecast widget"
  
  location:
    type: "string"
    required: true
    description: "Zip code or city name"
  
  displayName:
    type: "string"
    required: false
    description: "Custom location display name"
    default: ""
  
  units:
    type: "string"
    required: false
    default: "fahrenheit"
    enum: ["fahrenheit", "celsius"]
    description: "Temperature units"
  
  apiKey:
    type: "string"
    required: true
    description: "OpenWeatherMap API key"
  
  days:
    type: "integer"
    required: false
    default: 5
    min: 1
    max: 5
    description: "Number of forecast days to display"
  
  updateInterval:
    type: "integer"
    required: false
    default: 1800000
    description: "Update interval in milliseconds (default: 30 minutes)"

# Widget capabilities
capabilities:
  realTimeUpdates: true
  userInteraction: false
  apiIntegration: true
  caching: true
  responsive: true

# Extend the base widget template
extends: "widget"

# Data processing function to generate forecast data
dataProcessing:
  generateData: |
    import requests
    import json
    from datetime import datetime, timedelta
    
    try:
        # Extract configuration
        location = config.get('location', 'Decatur,GA')
        api_key = config.get('apiKey', '')
        units = config.get('units', 'fahrenheit')
        
        if not api_key:
            result = {
                'forecast': [],
                'location': location,
                'error': 'API key not configured'
            }
        else:
            # Map units to OpenWeatherMap format
            unit_map = {'fahrenheit': 'imperial', 'celsius': 'metric'}
            api_units = unit_map.get(units, 'imperial')
            
            # Fetch forecast data - use zip code format for better accuracy
            if location.isdigit() and len(location) == 5:
                # US zip code format
                url = f"http://api.openweathermap.org/data/2.5/forecast"
                params = {
                    'zip': f"{location},us",
                    'appid': api_key,
                    'units': api_units,
                    'cnt': 40  # 5 days * 8 forecasts per day
                }
            else:
                # City name format
                url = f"http://api.openweathermap.org/data/2.5/forecast"
                params = {
                    'q': location,
                    'appid': api_key,
                    'units': api_units,
                    'cnt': 40  # 5 days * 8 forecasts per day
                }
            
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            # Process forecast data
            forecast = []
            seen_dates = set()
            
            for item in data.get('list', []):
                date = datetime.fromtimestamp(item['dt'])
                date_str = date.strftime('%Y-%m-%d')
                
                # Only include one forecast per day (midday)
                if date_str not in seen_dates and len(forecast) < 5:
                    seen_dates.add(date_str)
                    
                    # Get weather info
                    weather = item['weather'][0]
                    temp = item['main']['temp']
                    humidity = item['main']['humidity']
                    wind_speed = item['wind']['speed']
                    
                    # Determine if it's today
                    today = datetime.now().date()
                    is_today = date.date() == today
                    
                    # Day name
                    if is_today:
                        day_name = 'Today'
                    else:
                        day_name = date.strftime('%A')
                    
                    # Weather icon mapping
                    icon_map = {
                        '01d': '‚òÄÔ∏è', '01n': 'üåô',
                        '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
                        '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
                        '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
                        '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
                        '10d': 'üå¶Ô∏è', '10n': 'üåßÔ∏è',
                        '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
                        '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
                        '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
                    }
                    
                    weather_icon = icon_map.get(weather['icon'], 'üå§Ô∏è')
                    
                    forecast.append({
                        'day': day_name,
                        'date': date_str,
                        'icon': weather_icon,
                        'high': round(temp),
                        'low': round(temp - 5),  # Approximate low
                        'description': weather['description'].title(),
                        'humidity': humidity,
                        'wind_speed': wind_speed,
                        'is_today': is_today
                    })
            
            # Get the actual location name from API response
            api_location = data.get('city', {}).get('name', location)
            api_country = data.get('city', {}).get('country', '')
            
            result = {
                'forecast': forecast,
                'location': api_location,
                'country': api_country,
                'units': units,
                'api_location': api_location  # For debugging
            }
            
    except Exception as e:
        result = {
            'forecast': [],
            'location': config.get('location', 'Unknown'),
            'error': str(e)
        }

# Widget body content - gets injected into {{widget-body}} placeholder  
widget-body: |
  <div class="forecast-content">
    <div class="forecast-header">
      <div class="forecast-location">{{displayName or api_location or location}}</div>
      <div class="forecast-subtitle">5-Day Forecast</div>
    </div>
    
    <div class="forecast-days">
      {% if forecast %}
        {% for day in forecast %}
          <div class="forecast-day {% if day.is_today %}today{% endif %}">
            <div class="forecast-day-info">
              <div class="forecast-day-name">{{day.day}}</div>
              <div class="forecast-temps">
                <span class="forecast-high">{{day.high}}¬∞</span>
                <span class="forecast-low">{{day.low}}¬∞</span>
              </div>
            </div>
            <div class="forecast-icon">{{day.icon}}</div>
          </div>
        {% endfor %}
      {% else %}
        <div class="forecast-day loading">
          <div class="forecast-day-info">
            <div class="forecast-day-name">No data</div>
            <div class="forecast-temps">
              <span class="forecast-high">--¬∞</span>
              <span class="forecast-low">--¬∞</span>
            </div>
          </div>
          <div class="forecast-icon">üå§Ô∏è</div>
        </div>
      {% endif %}
    </div>
  </div>

# Widget-specific CSS - uses theme variables for consistency
css: |
  .forecast-content {
    display: flex;
    flex-direction: column;
    padding: 0.5rem;
    gap: 0.5rem;
  }
  
  .forecast-header {
    text-align: center;
    border-bottom: 1px solid var(--border, rgba(255, 255, 255, 0.1));
    padding-bottom: 0.25rem;
    margin-bottom: 0.25rem;
  }
  
  .forecast-location {
    font-size: 0.8rem;
    font-weight: var(--font-weight-bold, 700);
    color: var(--text-primary, #ffffff);
    margin-bottom: 0.1rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
  }
  
  .forecast-subtitle {
    font-size: 0.65rem;
    color: var(--text-secondary, #cccccc);
    font-weight: var(--font-weight-medium, 500);
  }
  
  .forecast-days {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    overflow-y: auto;
  }
  
  .forecast-day {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 0.25rem 0.5rem;
    background: var(--color-1, rgba(255, 255, 255, 0.05));
    border-radius: 0.25rem;
    border: 1px solid var(--border, rgba(255, 255, 255, 0.1));
    transition: all 0.2s ease;
    min-height: 1.5rem;
  }
  
  .forecast-day:hover {
    background: var(--color-2, rgba(255, 255, 255, 0.1));
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }
  
  .forecast-day-info {
    display: flex;
    flex-direction: column;
    gap: 0.1rem;
    flex: 1;
  }
  
  .forecast-day-name {
    font-size: 0.7rem;
    font-weight: var(--font-weight-medium, 500);
    color: var(--text-primary, #ffffff);
    text-transform: capitalize;
    line-height: 1;
  }
  
  .forecast-temps {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
  
  .forecast-icon {
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.5rem;
    height: 1.5rem;
    background: var(--color-2, rgba(255, 255, 255, 0.1));
    border-radius: 50%;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.2));
    flex-shrink: 0;
  }
  
  .forecast-high {
    font-size: 0.75rem;
    font-weight: var(--font-weight-bold, 700);
    color: var(--text-primary, #ffffff);
  }
  
  .forecast-low {
    font-size: 0.65rem;
    font-weight: var(--font-weight-normal, 400);
    color: var(--text-secondary, #cccccc);
  }
  
  .forecast-day.loading {
    opacity: 0.6;
  }
  
  .forecast-day.today {
    background: var(--color-3, rgba(255, 255, 255, 0.1));
    border-color: var(--accent, #00ccaa);
  }
  
  .forecast-day.today .forecast-day-name {
    color: var(--accent, #00ccaa);
    font-weight: var(--font-weight-bold, 700);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .forecast-day {
      grid-template-columns: 1fr auto auto;
      gap: 0.5rem;
    }
    
    .forecast-low {
      display: none;
    }
  }

# No JavaScript needed - purely server-side rendered widget